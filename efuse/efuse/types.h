#define		EFUSE_MAP_LEN_88E			512
#define		EFUSE_MAX_SECTION_88E		64
#define		EFUSE_MAX_SECTION_BASE		16
#define		EFUSE_MAX_WORD_UNIT			4
#define		EFUSE_REAL_CONTENT_LEN_88E	256
#define		PGPKT_DATA_SIZE				8
#define		EFUSE_OOB_PROTECT_BYTES_88E (2+8)

#define AVAILABLE_EFUSE_ADDR(addr)	(addr < EFUSE_REAL_CONTENT_LEN_88E)

#define BIT(nr)							(1UL << (nr))

#define DBG_88E(fmt, args...)               \
    do {                                    \
        printf("%06d - %s : "fmt,           \
        __LINE__, __func__, ##args);        \
    } while (0)

typedef unsigned char u8;
typedef unsigned short u16;

enum {
	false = 0,
	true = 1
};

#define bool int

static u8 phymap[] = {
/*0x00*/
	0x0E, 0x29, 0x81, 0x6F, 0x33, 0xFF, 0x00, 0x00,
	0x00, 0xCF, 0x40, 0x81, 0xAE, 0x96, 0x2D, 0x03,
/*0x10*/
	0x93, 0x96, 0x11, 0xEF, 0x48, 0xFC, 0x8C, 0x00,
	0x11, 0x9B, 0xFF, 0x01, 0x00, 0x6C, 0x0B, 0x00,
/*0x20*/
	0x00, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x20, 0x25, 0x25, 0x24, 0x24,
/*0x30*/
	0x24, 0x24, 0x29, 0x29, 0x3C, 0x28, 0x28, 0x28,
	0xF1, 0xEF, 0x20, 0x20, 0x20, 0x1A, 0x00, 0x00,
/*0x40*/
	0x00, 0x00, 0x00, 0x0F, 0x30, 0x00, 0x00, 0x00,
	0x10, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x3E, 0x00,
/*0x50*/
	0x03, 0x4F, 0x30, 0xDA, 0x0B, 0x79, 0x81, 0x43,
	0x66, 0x00, 0x3C, 0x6F, 0x30, 0x46, 0xD8, 0x6D,
/*0x60*/
	0x66, 0x8B, 0x09, 0x03, 0x52, 0x8F, 0x30, 0x65,
	0x61, 0x6C, 0x74, 0x65, 0x6B, 0x0D, 0x03, 0xAF,
/*0x70*/
	0x30, 0x38, 0x30, 0x32, 0x2E, 0x31, 0x31, 0x6E,
	0x20, 0xCF, 0x30, 0x4E, 0x49, 0x43, 0x0C, 0x03,
/*0x80*/
	0x30, 0x30, 0x45, 0xEF, 0x30, 0x30, 0x34, 0x43,
	0x30, 0x30, 0x30, 0x31, 0x00, 0xFF, 0xFF, 0xFF,
/*0x90*/
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
/*0xa0*/
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
/*0xb0*/
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
/*0xc0*/
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
/*0xd0*/
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF,0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
/*0xe0*/
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
/*0xf0*/
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03,
};

static u8 ok[] = {
	0x29, 0x81, 0x00, 0x6c, 0x0b, 0x00, 0x00, 0x00,
	0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x29, 0x29,
	0x28, 0x28, 0x28, 0xf1, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x20, 0x20, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xda, 0x0b, 0x79, 0x81, 0x43, 0x66, 0x00, 0x3c,
	0x46, 0xd8, 0x6d, 0x66, 0x8b, 0x09, 0x03, 0x52,
	0x65, 0x61, 0x6c, 0x74, 0x65, 0x6b, 0x0d, 0x03,
	0x38, 0x30, 0x32, 0x2e, 0x31, 0x31, 0x6e, 0x20,
	0x4e, 0x49, 0x43, 0x0c, 0x03, 0x30, 0x30, 0x45,
	0x30, 0x34, 0x43, 0x30, 0x30, 0x30, 0x31, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x81, 0xae, 0x96, 0x2d, 0x03, 0x93, 0x96, 0x11,
	0xfc, 0x8c, 0x00, 0x11, 0x9b, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};

static inline void dump_data(u8 * data, int size)
{
	int i, j;

	printf("########    ");
	for (i = 0; i < (0x0f + 1); i++) {
		printf("0x%02x, ", i);
	}
	printf("\n-------------------------------");
	printf("---------------------------------");
	printf("---------------------------------");
	printf("-------------------------------\n");

	printf("0x000 =>    ");
	for (i = 0, j = 0; i < size; i++) {
		printf("0x%02x, ", data[i]);
		if (!(++j % 16)) {
			printf("\n");
			if (j != size)
				printf("0x%03x =>    ", j);
		}
	}
	printf("\n");
}
